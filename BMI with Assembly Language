.model small
.stack 100
.data            

; initializing all variables

strStart db "**** BMI Calculator Program ****$"  
strHeight db "Enter Height in Meters: $" 
strWeight db "Enter Weight in KGs: $"  

strBMI db "Your BMI is:$"
strBMIStatus db  "BMI Status: $"

strBMIStat1 db "Underweight / Severe Thinnes$"    
strBMIStat2 db "Normal$"    
strBMIStat3 db "Overweight / Obese$" 
 

strBMIRange1 db "BMI < 18 $"
strBMIRange2 db "18.5 < BMI < 25 $"
strBMIRange3 db "BMI > 25 $"

 
result dw ?

.code
main proc      ; main method from where execution starts
    
    mov ax,@data     ;these two lines are written to able to use our initialized variables
    mov ds,ax 
    
    
    ;printing welcome message
    
    lea dx,strStart      ; lea = load effective address       
    mov ah,09            ; it loads the address of memory varible (which we created),to print it on screen 
    int 21h              ; 09= service number to display string
    
    
    call newLineProc           ;printing new line by calling the procedure that is created on end
                               
    
    ;printing message to enter the height
    lea dx,strHeight          
    mov ah,09        
    int 21h
    
    ;storing 0 in all registers and our variable to avoid any garbage value
    mov result,0
    mov ax,0
    mov bx,0
    mov cx,0
    mov dx,0

heightInput:            ; label heightInput is for taking height from user
                        ; all lines are written to take multi-digit(e.g 1.7 or 20 etc) input
    and ax,000fh
    push ax             ; pushing ax= storing the value of ax in stack
    mov ax,10           ; stack is temporary memory
    mul bx
    mov bx,ax
    pop ax              ; pop = removing from stack 
    add bx,ax
    
    mov ah,01           ; 01 = service number to get input
    int 21h
    
    cmp al,13           ; comparision that if input is ENTER KEY
    je nextStep         ; if yes jump on the nextStep label otherwise keep taking input
                        ; je = JUMP EQUAL comparision operator and jump only give value is equal to variable  
                        
    jmp heightInput  ; jmp = jump statement, works like goto statement                      
                     ; it transfers the control to the line on which provided label exists
                     ; here it jumps on heightInput label and repeats the code
                     

nextStep:               
    
    call newLineProc
    
    ;printing message to enter the weight    
    
    lea dx,strWeight
    mov ah,09
    int 21h
    
    mov result,bx       ; storing the input height in result variable             
    
    mov ax,0
    mov bx,0

weightInput:               ; all steps are repeated below for taking weight input from user
    
    and ax,000fh
    push ax
    mov ax,10
    mul bx
    mov bx,ax
    pop ax
    add bx,ax
    
    mov ah,01
    int 21h
    
    cmp al,13
    je comparison    
    jmp weightInput 

comparison:                 
    ;calculation of BMI
    mov ax,result           ; in ax there is weight, in bx there is squre of height
    mov dx,0
    div bx                  ; dividing ax by bx 
                            ; result will be stored in ax
  
    ;the comparison is   
    ;to check in which range this  BMI lies
    
    cmp ax,1
    je overweight     ; jump accordingly to the BMI
    
    cmp ax,2
    je overweight
    
    cmp ax,3
    je normal
    
    cmp ax,4
    je thin
    
    cmp ax,5
    jge thin
    
overweight:     ; label created accroding to the BMI
    
    
    ; just printing some messages here
    call newLineProc
    
    lea dx,strBMIRange3
    mov ah,09
    int 21h
    
    call newLineProc
      
    
    lea dx,strBMIStatus
    mov ah,09
    int 21h
    
    lea dx,strBMIStat3
    mov ah,09
    int 21h 
    
    call newLineProc    
    jmp exit  ; jump on exit label to finish the program
    
    ; different label but processes is all same is in above

    
normal:
    call newLineProc
    call newLineProc
    
    lea dx,strBMIRange2
    mov ah,09
    int 21h
    
    call newLineProc
    call newLineProc  
    
    lea dx,strBMIStatus
    mov ah,09
        int 21h
    
    lea dx,strBMIStat2
    mov ah,09
    int 21h 
    
    call newLineProc    
    jmp exit    
   
              
thin:
    call newLineProc    
    call newLineProc
    
    lea dx,strBMIRange1
    mov ah,09
    int 21h
    
    call newLineProc    
    call newLineProc  
    
    lea dx,strBMIStatus
    mov ah,09
    int 21h
    
    lea dx,strBMIStat1
    mov ah,09
    int 21h 
    
    call newLineProc    
    
    ; exit  label to finish program execution
    
    exit:
    
    call newLineProc
    mov ah,4ch   
    int 21h                  
    ; ends the program
main endp       

newLineProc proc            ;procedure named newLineProc for printing new line 
    mov ah,02               ;it is created to avoid writing code of new line again and again
    mov dl,0dh
    int 21h
    mov dl,0ah
    int 21h
    ret
newLineProc endp    
